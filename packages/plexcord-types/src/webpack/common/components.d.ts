import * as t from "./types/components";
export declare const Forms: {
    FormTitle: import("../../utils/lazyReact").LazyComponentWrapper<t.FormTitle>;
    FormText: import("../../utils/lazyReact").LazyComponentWrapper<t.FormText>;
    FormSection: import("../../utils/lazyReact").LazyComponentWrapper<t.FormSection>;
    FormDivider: import("../../utils/lazyReact").LazyComponentWrapper<t.FormDivider>;
};
export declare const Card: import("../../utils/lazyReact").LazyComponentWrapper<t.Card>;
export declare const Button: import("../../utils/lazyReact").LazyComponentWrapper<t.Button>;
export declare const Switch: import("../../utils/lazyReact").LazyComponentWrapper<t.Switch>;
export declare const Checkbox: import("../../utils/lazyReact").LazyComponentWrapper<t.Checkbox>;
export declare const Tooltip: import("../../utils/lazyReact").LazyComponentWrapper<import("react").ComponentType<{
    text: import("react").ReactNode | import("react").ComponentType;
    children: import("react").FunctionComponent<{
        onClick(): void;
        onMouseEnter(): void;
        onMouseLeave(): void;
        onContextMenu(): void;
        onFocus(): void;
        onBlur(): void;
        "aria-label"?: string;
    }>;
    "aria-label"?: string;
    allowOverflow?: boolean;
    forceOpen?: boolean;
    hide?: boolean;
    hideOnClick?: boolean;
    shouldShow?: boolean;
    spacing?: number;
    color?: string;
    position?: t.PopoutPosition;
    tooltipClassName?: string;
    tooltipContentClassName?: string;
}>>;
export declare const TooltipContainer: import("../../utils/lazyReact").LazyComponentWrapper<import("react").ComponentType<import("react").PropsWithChildren<{
    text: import("react").ReactNode;
    element?: "div" | "span";
    "aria-label"?: string | false;
    delay?: number;
    color?: string;
    position?: t.PopoutPosition;
    spacing?: number;
    className?: string;
    tooltipClassName?: string | null;
    tooltipContentClassName?: string | null;
    allowOverflow?: boolean;
    forceOpen?: boolean;
    hideOnClick?: boolean;
    disableTooltipPointerEvents?: boolean;
}>>>;
export declare const TextInput: import("../../utils/lazyReact").LazyComponentWrapper<t.TextInput>;
export declare const TextArea: import("../../utils/lazyReact").LazyComponentWrapper<t.TextArea>;
export declare const Text: import("../../utils/lazyReact").LazyComponentWrapper<t.Text>;
export declare const Heading: import("../../utils/lazyReact").LazyComponentWrapper<t.Heading>;
export declare const Select: import("../../utils/lazyReact").LazyComponentWrapper<t.Select>;
export declare const SearchableSelect: import("../../utils/lazyReact").LazyComponentWrapper<t.SearchableSelect>;
export declare const Slider: import("../../utils/lazyReact").LazyComponentWrapper<t.Slider>;
export declare const Popout: import("../../utils/lazyReact").LazyComponentWrapper<t.Popout>;
export declare const Dialog: import("../../utils/lazyReact").LazyComponentWrapper<t.Dialog>;
export declare const TabBar: import("../../utils/lazyReact").LazyComponentWrapper<import("react").ComponentType<any> & Record<string, any>>;
export declare const Paginator: import("../../utils/lazyReact").LazyComponentWrapper<t.Paginator>;
export declare const Clickable: import("../../utils/lazyReact").LazyComponentWrapper<t.Clickable>;
export declare const Avatar: import("../../utils/lazyReact").LazyComponentWrapper<t.Avatar>;
export declare const ColorPicker: import("../../utils/lazyReact").LazyComponentWrapper<t.ColorPicker>;
export declare let createScroller: (scrollbarClassName: string, fadeClassName: string, customThemeClassName: string) => t.ScrollerThin;
export declare let scrollerClasses: Record<string, string>;
export declare const ScrollerNone: import("../../utils/lazyReact").LazyComponentWrapper<import("react").ComponentType<import("react").PropsWithChildren<{
    className?: string;
    style?: import("react").CSSProperties;
    dir?: "ltr";
    orientation?: "horizontal" | "vertical" | "auto";
    paddingFix?: boolean;
    fade?: boolean;
    onClose?(): void;
    onScroll?(): void;
}>>>;
export declare const ScrollerThin: import("../../utils/lazyReact").LazyComponentWrapper<import("react").ComponentType<import("react").PropsWithChildren<{
    className?: string;
    style?: import("react").CSSProperties;
    dir?: "ltr";
    orientation?: "horizontal" | "vertical" | "auto";
    paddingFix?: boolean;
    fade?: boolean;
    onClose?(): void;
    onScroll?(): void;
}>>>;
export declare const ScrollerAuto: import("../../utils/lazyReact").LazyComponentWrapper<import("react").ComponentType<import("react").PropsWithChildren<{
    className?: string;
    style?: import("react").CSSProperties;
    dir?: "ltr";
    orientation?: "horizontal" | "vertical" | "auto";
    paddingFix?: boolean;
    fade?: boolean;
    onClose?(): void;
    onScroll?(): void;
}>>>;
export declare const FocusLock: import("../../utils/lazyReact").LazyComponentWrapper<import("react").ComponentType<import("react").PropsWithChildren<{
    containerRef: import("react").Ref<HTMLElement>;
}>>>;
export declare let useToken: t.useToken;
export declare const MaskedLink: import("../../utils/lazyReact").LazyComponentWrapper<t.MaskedLink>;
export declare const Timestamp: import("../../utils/lazyReact").LazyComponentWrapper<t.Timestamp>;
export declare const Flex: import("../../utils/lazyReact").LazyComponentWrapper<t.Flex>;
export declare const OAuth2AuthorizeModal: import("../../utils/lazyReact").LazyComponentWrapper<import("react").ComponentType<any> & Record<string, any>>;
export declare const Animations: Record<"animated" | "Transition", any>;
